# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Build and publish to JFrog

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_and_publish_container:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '17' ]
       
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v3
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
          JFROG_CLI_AVOID_NEW_VERSION_WARNING: true


      - name: Test connection
        run: |
          echo "$JF_URL"
          echo "$JFROG_CLI_AVOID_NEW_VERSION_WARNING"
          jf rt ping --url=$JF_URL --access-token=$JF_ACCESS_TOKEN

      - name: Build tag and Push Docker Image
        env:
          IMAGE_NAME: petclinictest.jfrog.io/petclinic-docker/jfrog-docker-example-image:${{ github.run_number }}
        run: |
          jf docker build -t $IMAGE_NAME .
          jf docker push $IMAGE_NAME
          
      - name: Publish Build info With JFrog CLI
        env:
          # Generated and maintained by GitHub
          JFROG_CLI_BUILD_NAME: jfrog-docker-build-example
          # JFrog organization secret
          JFROG_CLI_BUILD_NUMBER : ${{ github.run_number }}
        run: |
          # Export the build name and build nuber
          # Collect environment variables for the build
          jf rt build-collect-env
          # Collect VCS details from git and add them to the build
          jf rt build-add-git
          # Publish build info
          jf rt build-publish